# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

#-------------------------------WORKFLOW-------------------------------------#
workflows:
  Toolbox-backend:
    jobs:
      - api-build-and-test:
          filters:
            branches:
              only: development
      - s3-upload:
          requires:
            - api-build-and-test
      - deploy-infrastructure:
          requires:
            - s3-upload
      - hold:
          type: approval
      - deploy-backend:
          requires:
            - deploy-infrastructure
      - production:
          requires:
            - deploy-backend
          filters:
            branches:
              only: production

#-------------------------------JOBS-------------------------------------#
jobs:
  api-build-and-test:
    docker:
      - image: cimg/node:15.1
    steps:
      - checkout

      - restore_cache:
          keys:
            - node-deps-v1-{{ .Branch }}-{{checksum "package-lock.json"}}

      - run:
          name: install packages
          command: npm ci

      - run:
          name: Run Build
          command: npm run build

      - save_cache:
          key: node-deps-v1-{{ .Branch }}-{{checksum "package-lock.json"}}
          paths:
            - ~/.npm

      - run:
          name: Run Tests
          command: npm run test

      - persist_to_workspace:
          root: .
          paths:
            - .

  s3-upload:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - targzip

      - attach_workspace:
          at: /tmp

      - run:
          name: compress build
          command: |
            cd ..
            tar -zcvf /my-app-binary.tar.gz /tmp/

      - run:
          name: Deploy to S3
          command: aws s3 cp /my-app-binary.tar.gz s3://toolbox-testing-ci/binary/${CIRCLE_WORKFLOW_ID:0:7}

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - targzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=toolbox \
              --stack-name "toolbox-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"

      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7} \
            --output text >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt

      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt

      - destroy-environment

  destroy-evertything:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - targzip
      - destroy-environment

  deploy-backend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - ansible-prep
      - add_ssh_keys:
          fingerprints: ["69:e5:65:c6:b9:16:55:6d:01:ec:ad:51:0f:55:b6:99"]
      - attach_workspace:
          at: ~/
      - run:
          name: ansible playbook run
          command: |
            echo $(pwd)
            cat .circleci/ansible/inventory.txt
            echo $(cat .circleci/ansible/inventory.txt)
            ansible-playbook -i .circleci/ansible/inventory.txt .circleci/ansible/deploy-backend.yml \
            -e "AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID} AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY} AWS_DEFAULT_REGION=${AWS_DEFAULT_REGION} ID=${CIRCLE_WORKFLOW_ID:0:7}"
      - destroy-environment

#-------------------------------COMMANDS--------------------------#
commands:
  targzip:
    description: Install tar and Gzip
    steps:
      - run:
          name: install
          command: |
            yum install tar -y
            yum install gzip -y

  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
    steps:
      - run:
          name: remove files
          when: on_fail
          command: aws s3 rm s3://toolbox-testing-ci/binary/${CIRCLE_WORKFLOW_ID:0:7} --recursive
      - run:
          name: Delete Backend
          when: on_fail
          command: aws cloudformation delete-stack --stack-name toolbox-backend-${CIRCLE_WORKFLOW_ID:0:7}

  env-loading:
    description: loading env variables for use in ansible
    steps:
      - run:
          name: loading env files
          command: |
            echo ENVIRONMENT=production > ansible/.env
            echo AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID >> ansible/.env
            echo AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY >> ansible/.env
            echo AWS_DEFAULT_REGION=$AWS_DEFAULT_REGION >> ansible/.env
            echo ID=${CIRCLE_WORKFLOW_ID:0:7} >> ansible/.env

  ansible-prep:
    description: requirements for ansible image
    steps:
      - run:
          name: Install curl, tar and gzip
          command: |
            echo installing curl, tar and gzip
            apk add --update tar gzip curl
      - run:
          name: Install ansible
          command: |
            echo Installing ansisble
            apk add --update ansible
      - run:
          name: Install aws cli
          command: |
            ansible-galaxy collection install amazon.aws
      - run:
          name: Install amazon.aws
          command: |
            echo galaxy do your thing
            ansible-galaxy collection install amazon.aws

#hello
